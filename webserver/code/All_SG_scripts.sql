begin 
execute immediate 'create table stock_'||to_char(sysdate,'YYYYMMDDHH24MI')||' as select * from stock';
end;
/

drop table stock;

begin 
execute immediate 'create table orders_'||to_char(sysdate,'YYYYMMDDHH24MI')||' as select * from orders';
end;
/

drop table orders;

begin 
execute immediate 'create table products_'||to_char(sysdate,'YYYYMMDDHH24MI')||' as select * from products';
end;
/

drop table products;

begin 
execute immediate 'create table app_log_'||to_char(sysdate,'YYYYMMDDHH24MI')||' as select * from app_log';
end;
/


drop table app_log;


create table products (id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY primary key,
                       name varchar2(50) unique,
                       category varchar2(50) not null,
                       price number not null,
                       units varchar2(100) not null,
                       offerprice number not null,
                       instock varchar2(10) not null,
                       active  varchar2(10) default 'Y',
                       ts TIMESTAMP WITH LOCAL TIME ZONE default systimestamp
                      );

insert into products (name,category,units,price,offerprice,instock)
values ('Banginapalli','Mangoes','Approx 4.3kg','32','29','Y');

insert into products (name,category,units,price,offerprice,instock)
values ('Alphonso','Mangoes','Approx 2.8kg','32','29','Y');

insert into products (name,category,units,price,offerprice,instock)
values ('Kesar','Mangoes','Approx 4kg','32','29','Y');

insert into products (name,category,units,price,offerprice,instock)
values ('Mixed','Mangoes','Approx 4kg','31','29','Y');

insert into products (name,category,units,price,offerprice,instock)
values ('Neelam','Mangoes','Approx 4kg','35','32','N');

insert into  products (name,category,units,price,offerprice,instock)
values ('ImamPasand','Mangoes','Approx 4kg','42','40','N');


commit;

drop sequence orders_seq;
create sequence orders_seq start with 1000 increment by 10;

begin 
execute immediate 'create table users_'||to_char(sysdate,'YYYYMMDDHH24MI')||' as select * from users';
end;
/

drop table users;

  CREATE TABLE users
   (FIRSTNAME VARCHAR2(50) NOT NULL ENABLE, 
	LASTNAME VARCHAR2(50) NOT NULL ENABLE, 
	EMAIL VARCHAR2(50), 
    MOBILE VARCHAR2(15), 
	PASSWORD VARCHAR2(30) NOT NULL ENABLE, 
	CREATED TIMESTAMP WITH LOCAL TIME ZONE default systimestamp ,
	LAST_MODIFIED TIMESTAMP WITH LOCAL TIME ZONE default systimestamp,
	TYPE VARCHAR2(10), 
	 PRIMARY KEY (EMAIL));


create table orders (id number NOT NULL,
                     email varchar2(50),
                     prodid number,
                     qty number,
                     price number,
                     total_price number,
                     status varchar2(20) default 'NEW',
                     modified_by varchar2(50),
                     actualprice number,comments varchar2(1000),
                     payment_upd_by varchar2(100),
                     ts timestamp default systimestamp at time zone 'Asia/Singapore',
                     constraint fk_prodid foreign key(prodid)references products(id),
                     constraint fk_email foreign key(email)references users(email));


begin 
execute immediate 'create table deliveries_'||to_char(sysdate,'YYYYMMDDHH24MI')||' as select * from deliveries';
end;
/

drop table deliveries;

create table deliveries (order_id number,
                         del_mode varchar2(20),
                         address varchar2(1000),
                         details varchar2(1000),
                         location varchar2(100), 
                         deliverycharges number,
                         paymode varchar2(10),
                         stock_loc varchar2(100),
                         stock_upd_by varchar2(100),
                         comments varchar2(1000)
                         );

create table stock (Name varchar2(100),stock number,ordered number,  constraint fk_name foreign key(name)references products(name),ts timestamp default systimestamp at time zone 'Asia/Singapore',updated_ts timestamp default systimestamp at time zone 'Asia/Singapore');

--insert into  stock (name,stock,ordered)
--select name,100,100
--from products 
--where instock='Y';drop table react_config;

begin 
execute immediate 'create table react_config_'||to_char(sysdate,'YYYYMMDDHH24MI')||' as select * from react_config';
end;
/

drop table react_config;

create table react_config (name varchar2(30) primary key,
                           JSON_STRING varchar2(4000),
                           ts timestamp with local time zone default systimestamp);

insert into react_config (name,JSON_STRING)
values('NAME','{"value":"tnrmangoes"}');

insert into react_config (name,JSON_STRING)
values( 'CURRENCY','{"value":"SGD"}');

insert into react_config (name,JSON_STRING)
values('SELF_LOCATIONS','{"value":[{"city":"Singapore","name":"Punggol","details":["Venkat Vona","Blk - 679A","Punggol Drive","S-821679","Mobile: 81601289"]},{"city":"Singapore","name":"Tampines","details":["Venky", "Blk - 929","Tampines St 91 (Tampines West MRT)","S-520929","Mobile: 98346177"]},{"city":"Singapore","name":"Pasir Ris","details":["Mohan","Blk 574","Pasir Ris St 53","S-520574","Mobile: 90628025"]},{"city":"Singapore","name":"Melville Park","details":["Venky","Blk - 22","LOBBY 4 #02-15","Meliville Park","14 Simei Street","Mobile: 98346177"]},{"city":"Singapore","name":"Woodlands","details":["Srinivas Reddy","Blk 724, #03-502","Woodlands ave 6","730724","Mobile : 91003247"]}]}');

insert into react_config (name,JSON_STRING)
values('DEL_LOCATIONS','{"value":[{"name":"Tampines","delCharge":"5"},{"name":"Sengkang","delCharge":"5"},{"name":"Punggol","delCharge":"5"},{"name":"Pasir Ris","delCharge":"5"},{"name":"Simei","delCharge":"5"},{"name":"Bedok","delCharge":"6"},{"name":"Upper East Coast","delCharge":"5"},{"name":"Other","delCharge":"7"}]}');

insert into react_config (name,JSON_STRING)
values('DEL_DATE','{"value":"Starting 25th April(Thursday)"}');

insert into react_config (name,JSON_STRING)
values('ADDRESSFORM','{"value":[{"name":"Name","type":"text","placeholder":"Your Name","value":"","required":"Y","minLength":"3"},{"name":"Blk","type":"text","placeholder":"Ex:929","value":"","required":"Y","minLength":"1"},{"name":"Unit","type":"text","placeholder":"Ex: #13-234","value":"","required":"Y","minLength":"3"},{"name":"Street ","type":"text","placeholder":"Ex: Tampines Street 22","value":"","required":"Y","minLength":"3"},{"name":"PostalCode","type":"text","placeholder":"Ex: 520202","value":"","required":"Y","minLength":"3"},{"name":"Mobile","type":"text","placeholder":"Mobile","value":"","required":"Y","minLength":"3"},{"name":"Location","type":"list","placeholder":"Location","value":"","listValues":["","Tampines","Sengkang","Punggol","Bedok","Simei","Other"],"required":"Y"}]}');


insert into react_config (name,JSON_STRING)
values('SELFFORM','{"value":[{"name":"Name","type":"text","placeholder":"Your Name","value":"","required":"Y","minLength":"3"},{"name":"Mobile","type":"text","placeholder":"Mobile No","value":"","required":"Y","minLength":"8"}]}');

insert into react_config (name,JSON_STRING)
values('COMMENTFORM','{"value":[{"name":"PRICE","type":"text","placeholder":"Received Price","value":"","required":"Y","minLength":"1"},{"name":"Comments","type":"textarea","placeholder":"","value":"","required":"","minLength":""}]}');

insert into react_config (name,JSON_STRING)
values('STOCKFORM','{"value":[{"name":"STOCK_LOC","type":"text","placeholder":"Enter stock location Name","value":"","required":"Y","minLength":"1"},{"name":"Comments","type":"textarea","placeholder":"","value":"","required":"","minLength":""}]}');

insert into react_config (name,JSON_STRING)
values('PAYMENTINFO','{"value":{"companyName": "GARDEN ROOTS PTE. LTD","uniquePayID":"UEN : 201713208M","bankDetails":["GardenRoots Pte Ltd","OCBC Account# : 712177963001"],"whatsappNo":"81601289","bankIfscSwiftCodeType":"SWIFT","swiftIfscCodeValue" : "SWIFT","payemntOptions":[{"type":"PayNow","value":"qrcode"},{"type":"Bank A/C","value":"bank"},{"type":"PayLater","value":"later"}]}}');


commit;


insert into  stock (name,stock,ordered)
values('Banginapalli',200,0);

insert into  stock (name,stock,ordered)
values('Alphonso',100,0);

insert into  stock (name,stock,ordered)
values('Kesar',100,0);

insert into  stock (name,stock,ordered)
values('Mixed',50,0);

insert into  stock (name,stock,ordered)
values('ImamPasand',50,0);



--select * from stock;

commit;

delete from users;

REM INSERTING into 
SET DEFINE OFF;
Insert into  users(FIRSTNAME,LASTNAME,EMAIL,PASSWORD,TYPE,CREATED,LAST_MODIFIED) values ('Venkatesh','Thammichetti','whenkii@yahoo.co.in','311083','admin',to_date('07/04/22','DD/MM/RR'),to_date('07/04/22','DD/MM/RR'));
Insert into  users(FIRSTNAME,LASTNAME,EMAIL,PASSWORD,TYPE,CREATED,LAST_MODIFIED) values ('Garden Roots','Garden Roots','GARDENROOTS.SG@GMAIL.COM','GardenRootsFresh123$','admin',to_date('08/04/22','DD/MM/RR'),to_date('08/04/22','DD/MM/RR'));
Insert into  users(FIRSTNAME,LASTNAME,EMAIL,PASSWORD,TYPE,CREATED,LAST_MODIFIED) values ('Mohan ','Reddy','Mohan.reddy02@gmail.com','Jai@9876','admin',to_date('08/04/22','DD/MM/RR'),to_date('08/04/22','DD/MM/RR'));
Insert into  users(FIRSTNAME,LASTNAME,EMAIL,PASSWORD,TYPE,CREATED,LAST_MODIFIED) values ('Mohan','Yadamuri','support@dailycart24x7.com','Jai@9876','admin',to_date('11/04/22','DD/MM/RR'),to_date('11/04/22','DD/MM/RR'));
Insert into  users(FIRSTNAME,LASTNAME,EMAIL,PASSWORD,TYPE,CREATED,LAST_MODIFIED) values ('Venkat','Vona','vona_venkat@yahoo.com','Venkat321','admin',to_date('11/04/22','DD/MM/RR'),to_date('11/04/22','DD/MM/RR'));
Insert into  users(FIRSTNAME,LASTNAME,EMAIL,PASSWORD,TYPE,CREATED,LAST_MODIFIED) values ('Prem Kumar','Kalavakunta ','kalavakunta@gmail.com','Qwer@1234','user',to_date('12/04/22','DD/MM/RR'),to_date('12/04/22','DD/MM/RR'));


commit;


--grant select on products to ro;
--grant select on orders to ro;
--grant select on deliveries to ro;
--grant select on stock to ro;
--grant select on users to ro;
--grant execute on pkg_orders to ro;
--grant execute on addProduct to ro;
--grant select on orders_seq to ro;


create table app_log(id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY primary key,description varchar2(200),details varchar2(4000),code number,error_desc varchar2(2000),package_name varchar2(50),proc_name varchar2(50),ts timestamp default systimestamp);

create or replace package pkg_orders is
g_package varchar2(50) := 'pkg_orders';
 TYPE createOrderRec IS RECORD ( ORDERID orders.id%type,
                                 EMAIL orders.email%type,
                                 PRODID orders.prodid%type,
                                 QTY orders.qty%type,
                                 PRICE orders.price%type,
                                 DELMODE deliveries.del_mode%type,
                                 ADDRESS deliveries.address%type,
                                 LOCATION deliveries.location%type,
                                 PAYMODE deliveries.paymode%type,
                                 DELIVERYCHARGES deliveries.deliverycharges%type );

procedure create_order (   p_in createOrderRec,
                           p_out out varchar2,
                           p_out_rec out createOrderRec
);

end pkg_orders;
/

create or replace package body pkg_orders is
procedure create_order ( p_in in createOrderRec,
                         p_out out varchar2,
                         p_out_rec out createOrderRec
) is
v_proc varchar2(50) := 'create_order';
v_cnt number;
v_sqlcode number;
v_error_desc varchar2(1000);
begin

p_out := 'OK';

insert into app_log (description,package_name,proc_name)
values('START ',g_package,v_proc);

select count(*)
into v_cnt
from users
where email=trim(p_in.email);



if v_cnt = 0 and (p_in.email != 'Guest') then
p_out := 'User doesn''t exists, Please login to make an Order';
return;
end if;


insert into orders (id,email,prodid,qty,price,total_price)
values(
       p_in.ORDERID,p_in.EMAIL,p_in.PRODID,p_in.QTY,p_in.PRICE,p_in.Qty*p_in.PRICE);

insert into deliveries (order_id ,del_mode,address,location,paymode,deliverycharges)
values(
       p_in.ORDERID,p_in.delmode,p_in.address ,p_in.location,p_in.paymode,p_in.deliverycharges);

delete from deliveries a
where rowid < (select max(rowid) from deliveries b where a.order_id=b.order_id);


-- insert into addresses (email,address1,address2,postalcode)
-- values(p_email,p_address1,p_address2,p_postalcode);

update stock
set ordered=ordered+p_in.qty
where name=(select name from products where id=p_in.prodid);

insert into app_log (description,package_name,proc_name)
values('COMPLETED ',g_package,v_proc);

commit;
exception
when others then
rollback;
p_out := 'Some error '||SQLERRM;
v_sqlcode := sqlcode;
v_error_desc := sqlerrm;
insert into app_log (description,package_name,proc_name,code,error_desc)
values('FAILED ',g_package,v_proc,v_sqlcode,v_error_desc);
commit;
end create_order;
begin
g_package :='pkg_orders';
end pkg_orders;
/

create or replace package PKG_ACCOUNTS is

 TYPE ACCOUNT_REC IS RECORD     ( FIRSTNAME users.FIRSTNAME%type,
                                 LASTNAME users.LASTNAME%type,
                                 EMAIL users.EMAIL%type,
                                 MOBILE users.MOBILE%type,
                                 PASSWORD users.PASSWORD%type);

procedure create_account ( p_in ACCOUNT_REC,
                           p_out out varchar2,
                           p_out_rec out ACCOUNT_REC
);

end PKG_ACCOUNTS;
/

create or replace package body PKG_ACCOUNTS is
procedure create_account ( p_in ACCOUNT_REC,
                           p_out out varchar2,
                           p_out_rec out ACCOUNT_REC
) is
v_proc varchar2(50) := 'create_account';
v_cnt number;
begin

p_out := 'OK';

select count(*)
into v_cnt
from users
where lower(email)=lower(p_in.email);

if v_cnt > 0 then
p_out := 'User already exists';
return;
end if;

insert into users (firstname,lastname,email,mobile,password)
values(p_in.firstname,p_in.lastname,p_in.email,p_in.mobile,p_in.password);

-- insert into addresses (email,address1,address2,postalcode)
-- values(p_email,p_address1,p_address2,p_postalcode);

commit;

exception
when others then
p_out := 'Some error '||SQLCODE;
end create_account;

end PKG_ACCOUNTS;
/


-- drop table orders

create or replace procedure create_order ( p_order_id orders.id%type,
                                           p_email orders.email%type,
                                           p_prodid orders.prodid%type,
                                           p_qty orders.qty%type,
                                           p_price orders.price%type,
                                           p_del_mode deliveries.del_mode%type,
                                           p_address deliveries.address%type,
                                           p_location deliveries.location%type,
                                           p_deliverycharges deliveries.deliverycharges%type,
                                           p_out out varchar2
) is
v_proc varchar2(50) := 'create_order';
v_cnt number;
begin

p_out := 'OK';

select count(*)
into v_cnt
from users
where lower(email)=lower(trim(p_email));

if v_cnt = 0 and p_email != 'Guest' then
p_out := 'User doesn''t exists ';
return;
end if;

insert into orders (id,email,prodid,qty,price,total_price)
values(p_order_id,p_email,p_prodid,p_qty,p_price,p_qty*p_price);

insert into deliveries (order_id ,del_mode,address,details,location,deliverycharges)
values(p_order_id,p_del_mode,substr(p_address,instr(p_address,'|')+1),substr(p_address,1,instr(p_address,'|')-1) ,p_location,p_deliverycharges);

delete from deliveries a
where rowid < (select max(rowid) from deliveries b where a.order_id=b.order_id);


-- insert into addresses (email,address1,address2,postalcode)
-- values(p_email,p_address1,p_address2,p_postalcode);

update stock
set ordered=ordered+p_qty
where name=(select name from products where id=p_prodid);

commit;

exception
when others then
p_out := 'Some error '||SQLERRM;
end create_order;
/



create or replace procedure addProduct  (p_name        products.name%type,
                                         p_units      products.units%type,
                                         p_price      products.price%type,
                                         p_offerprice products.offerprice%type,
                                         p_inStock    products.instock%type,
                                         p_out        out varchar2
) is
v_proc varchar2(50) := 'addProduct';
v_cnt number;
begin

p_out := 'OK';

select count(*)
into v_cnt
from products
where name=p_name;

if v_cnt > 0 then
p_out := 'Product already exists';
return;
end if;

insert into products (name,units,price,offerprice,inStock)
values(p_name,p_units,p_price,p_offerprice,p_inStock);

-- insert into addresses (email,address1,address2,postalcode)
-- values(p_email,p_address1,p_address2,p_postalcode);

commit;

exception
when others then
p_out := 'Some error '||SQLCODE;
end addProduct;
/

create or replace procedure updateProduct(p_name        products.name%type,
                                          p_units      products.units%type default NULL,
                                          p_price      products.price%type default NULL,
                                          p_offerprice products.offerprice%type default NULL,
                                          p_inStock    products.instock%type default NULL,
                                          p_active     products.active%type default NULL,
                                          p_out        out varchar2
) is
v_proc varchar2(50) := 'addProduct';
v_cnt number;
v_rec_products products%rowtype;
begin

p_out := 'OK';

select count(*)
into v_cnt
from products
where upper(name)=upper(p_name);

select *
into v_rec_products
from products
where upper(name)=upper(p_name);

if v_cnt > 0 then

--    if nvl(p_units,'XX') <> nvl(v_rec_products.units,'XX') and nvl(p_price,'XX') <> nvl(v_rec_products.price,'XX') and nvl(p_offerprice,'XX') <> nvl(v_rec_products.offerprice,'XX') and nvl(p_inStock,'XX') <> nvl(v_rec_products.inStock,'XX') and nvl(p_active,'XX') <> nvl(v_rec_products.active,'XX') then
--    p_out := 'No changes made';
--    return;
--    end if;

update products
set units=nvl(p_units,units),price=nvl(p_price,price),offerprice=nvl(p_offerprice,offerprice),inStock=nvl(p_inStock,inStock),active=nvl(p_active,active)
where upper(name)=upper(p_name);
commit;
else
p_out := 'Product doesn''t exist';
return;
end if;

exception
when others then
p_out := 'Some error '||SQLCODE;
end updateProduct;


-- with ordersall as (select id order_id,sum(price) Total_Price,sum(qty) quantity,to_char(max(ts + interval '8' hour ),'DD-MON-YY HH24:MI') time,max(status) status from orders group by id order by id desc) select a.order_id,total_price price,decode(del_mode,'delivery',decode(location,'other',6,4)+total_price,total_price) total_price,quantity,time,status,del_mode,location,details,paymode,address from ordersall a,deliveries b where a.order_id=b.order_id;
